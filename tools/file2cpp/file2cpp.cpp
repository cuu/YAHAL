// ---------------------------------------------
//           This file is part of
//      _  _   __    _   _    __    __
//     ( \/ ) /__\  ( )_( )  /__\  (  )
//      \  / /(__)\  ) _ (  /(__)\  )(__
//      (__)(__)(__)(_) (_)(__)(__)(____)
//
//     Yet Another HW Abstraction Library
//      Copyright (C) Andreas Terstegge
//      BSD Licensed (see file LICENSE)
//
// ---------------------------------------------
//
// Small program to convert any file into a C/C++ struct
//
#include <iostream>
#include <iomanip>
#include <fstream>
#include <filesystem>
#include <sstream>
#include <string>
#include <algorithm>
#include <cstdint>
#include <cstdlib>
#include <getopt.h>
#include <libgen.h>

using namespace std;

void usage() {
    cout << "Usage: file2cpp [-o outfile] file"<< endl;
    cout << endl;
    cout << "-o dir : The output directory. Default is ." << endl;
    cout << "file   : A valid file" << endl;
    exit(1);
}

int main(int argc, char *argv[]) {
    // Process the command line arguments
    string infile;
    string outdir = ".";
    int opt;
    while ((opt = getopt(argc, argv, ":o:")) != -1) {
        switch (opt) {
            case 'o': {
                outdir = optarg;
                break;
            }
            case ':': {
                cerr << "Option needs a value!" << endl;
                usage();
                break;
            }
            case '?': {
                cerr << "Unknown option '" << (char)optopt << "'" << endl;
                usage();
                break;
            }
        }
    }
    if (optind == (argc-1)) {
        infile = argv[optind];
    } else {
        cerr << "No or too many filenames given!" << endl;
        usage();
    }
    
    // Process the input file name
    std::filesystem::path filepath{infile};
    string name_we = filepath.filename().string();
    size_t dot = name_we.find_last_of('.');
    if (dot != string::npos) {
        name_we = name_we.substr(0, dot);
    }
    string outfile_h   = outdir + "/" + name_we + ".h";
    string outfile_cpp = outdir + "/" + name_we + ".cpp";
    
    string base = basename( (char*)name_we.c_str() );
    // Dashes are not valid in variable names, so replace them
    std::replace(base.begin(), base.end(), '-', '_');

    // Open in and out files
    ifstream ifs    (infile.c_str(),      ios::binary | ios::in);
    ofstream ofs_h  (outfile_h.c_str(),   ios::binary | ios::out);
    ofstream ofs_cpp(outfile_cpp.c_str(), ios::binary | ios::out);

    if (!ifs) {
        cerr << "Error: Could not open input file " << infile << endl;
        exit(1);
    }
    if (!ofs_h) {
        cerr << "Error: Could not open output file " << outfile_h << endl;
        exit(1);
    }
    if (!ofs_cpp) {
        cerr << "Error: Could not open output file " << outfile_cpp << endl;
        exit(1);
    }
    
    // Get the input file size
    streampos begin, end;
    begin = ifs.tellg();
    ifs.seekg(0, ios_base::end);
    end = ifs.tellg();
    ifs.seekg(0, ios_base::beg);
    size_t filesize = end - begin;

    // Write header file
    ofs_h << "//" << endl;
    ofs_h << "// This file was generated by file2cpp, a small" << endl;
    ofs_h << "// program to convert any binary or text file" << endl;
    ofs_h << "// into a C/C++ struct of unsigned characters." << endl;
    ofs_h << "//" << endl;
    ofs_h << "//  Source file was: " << infile << " (size: " << filesize
          << " bytes)" << endl;
    ofs_h << "//" << endl << endl;
    ofs_h << "#include <cstdint>" << endl;
    ofs_h << endl;
    ofs_h << "extern const uint8_t " << base << "[" << filesize << "];" << endl;

    // Write cpp file
    ofs_cpp << "//" << endl;
    ofs_cpp << "// This file was generated by file2cpp, a small" << endl;
    ofs_cpp << "// program to convert any binary or text file" << endl;
    ofs_cpp << "// into a C/C++ struct of unsigned characters." << endl;
    ofs_cpp << "//" << endl;
    ofs_cpp << "//  Source file was: " << infile << " (size: " << filesize
            << " bytes)" << endl;
    ofs_cpp << "//" << endl << endl;
    ofs_cpp << "#include <cstdint>" << endl;
    ofs_cpp << endl;
    ofs_cpp << "extern const uint8_t " << base << "[" << filesize << "] = {" << endl;
    size_t count = 0;
    while (true) {
        char c;
        ifs.read(&c, 1);
        if (ifs.fail())  break;
        unsigned short s = c;
        s &= 0xff;
        ofs_cpp << "0x" << hex << setw(2) << setfill('0') << s;
        count++;
        if (count != filesize) ofs_cpp << ", ";
        if ((count % 10) == 0) ofs_cpp << endl;
    }
    ofs_cpp << endl << "};" << endl;

    // Close all files
    ifs.close();
    ofs_h.close();
    ofs_cpp.close();
    return 0;
}
