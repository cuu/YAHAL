#include "lodepng.h"
#include <iostream>
#include <iomanip>
#include <fstream>
#include <sstream>
#include <string>
#include <algorithm>
#include <cstdint>
#include <cstdlib>
#include <getopt.h>
#include <libgen.h>

using namespace std;

int main(int argc, char *argv[])
{
	// Process the command line arguments
	/////////////////////////////////////
	string infile;
	string bg_str;
	int opt;
	while ((opt = getopt (argc, argv, "f:b:")) != -1)
	{
		switch (opt)
		{
		case 'f': infile = optarg;
		break;
		case 'b': bg_str = optarg;
		break;
		}
	}

	if (infile.size()==0) {
		cout << "Usage: png2cpp -f <file.png> [-b 0xrrggbb]" << endl << endl;
		cout << "-f <file.png> : A valid PNG file" << endl;
		cout << "-b 0xrrggbb   : The optional background color as 6 digit hex number." << endl;
		cout << "                Default is black (0x000000)." << endl;
		exit(1);
	}

	// Process background color
	///////////////////////////
	uint32_t bg_int = 0;
	if (bg_str.size()) {
		istringstream iss(bg_str);
		iss >> hex >> bg_int;
		cout << "Background color set to 0x" << hex << setw(6) << setfill('0') << bg_int << endl;
	}

	// Process the file name
	////////////////////////
	size_t i = infile.find('.');
	string filename = infile;
	if (i != string::npos) filename = infile.substr(0, i);
	string outfile = filename + ".cpp";

	// Load and decode image
	////////////////////////
	std::vector<unsigned char> image;
	unsigned width, height;
	unsigned error = lodepng::decode(image, width, height, infile);
	// If there's an error, display it
	if (error) {
		cerr << "decoder error " << error << ": " << lodepng_error_text(error) << endl;
		exit(1);
	}

	// The pixels are now in the vector "image", 4 bytes per pixel, ordered RGBARGBA
	cout << "File '" << infile << "' successfully read in ";
	cout << "(size " << dec << width << "x" << height << " pixels)!" << endl;

	// Generate output file
	///////////////////////
	cout << "Generating file '" << outfile << "' ..." << endl;
	ofstream ofs(outfile.c_str());
	if (!ofs) {
		cerr << "Problem creating output file '" << outfile << "'" << endl;
		exit(1);
	}

	std::replace( filename.begin(), filename.end(), '-', '_'); // replace all dashes
	filename = basename( (char *)filename.c_str() );
	
	size_t outsize = image.size() / 4;
	ofs << "//" << endl;
	ofs << "// This file was generated by png2cpp, a small" << endl;
	ofs << "// program to convert a PNG image file into"    << endl;
	ofs << "// a C/C++ struct of uint16_t values (RGB565)." << endl;
	ofs << "// (c) 2018 Andreas Terstegge" << endl;
	ofs << "//" << endl;
	ofs << "//  Source file was: " << infile << endl;
	ofs << "//" << endl << endl;
	ofs << "#include <cstdint>" << endl << endl;
	ofs << "extern const uint16_t " << filename << "[" << outsize << "] = {" << endl;

	float bg_red   = (bg_int & 0x00ff0000) >> 16;
	float bg_green = (bg_int & 0x0000ff00) >>  8;
	float bg_blue  = (bg_int & 0x000000ff);

	for (size_t i=0; i < outsize; ++i) {
//		if (i%width == 0) ofs << endl << "// Row" << dec << i/width << endl;
//		//if (i==0)//
//		//ofs << endl;

		if ((i % 8) == 0 && (i != 0)) {
			ofs << endl;
		}

		float img_red   = image[4*i];
		float img_green = image[4*i+1];
		float img_blue  = image[4*i+2];
		float alpha     = image[4*i+3];
		alpha /= 255.; // Scale alpha channel to 0...1

		float res_red   = alpha * img_red   + (1.0-alpha) * bg_red;
		float res_green = alpha * img_green + (1.0-alpha) * bg_green;
		float res_blue  = alpha * img_blue  + (1.0-alpha) * bg_blue;

		uint16_t red   = res_red;
		uint16_t green = res_green;
		uint16_t blue  = res_blue;

		if (red   > 255) red   = 255;
		if (green > 255) green = 255;
		if (blue  > 255) blue  = 255;

		// Calculate RGB565 data
		red    &= 0xf8; // mask out higher 5 bits
		red   <<= 8;    // and shift
		green  &= 0xfc; // mask out higher 6 bits
		green <<= 3;
		blue   &= 0xf8; // mask out higher 5 bits
		blue  >>= 3;

		uint16_t rgb565 = red | green | blue;

		ofs << "0x" << hex << setw(4) << setfill('0') << rgb565;
		if (i != (outsize-1)) ofs << ", ";

	}
	ofs << endl << "};" << endl;

	// Close output file
	////////////////////
	ofs.close();
	return 0;

}

